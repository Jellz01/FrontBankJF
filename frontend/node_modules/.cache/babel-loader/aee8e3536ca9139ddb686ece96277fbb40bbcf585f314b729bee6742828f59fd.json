{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./App.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[accounts,setAccounts]=useState([]);const[name,setName]=useState('');const[initialBalance,setInitialBalance]=useState('');const[message,setMessage]=useState('');const API_URL=process.env.REACT_APP_API_URL||'/api';// Usar proxy en desarrollo, o ruta directa en producción\nconst fetchAccounts=async()=>{try{const response=await fetch(`${API_URL}/accounts`);if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();setAccounts(data);}catch(error){console.error(\"Error fetching accounts:\",error);setMessage(`Error al cargar cuentas: ${error.message}`);}};const createAccount=async e=>{e.preventDefault();setMessage('');try{const response=await fetch(`${API_URL}/accounts`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,initialBalance:parseFloat(initialBalance)})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||`HTTP error! status: ${response.status}`);}const newAccount=await response.json();setMessage(`Cuenta '${newAccount.name}' creada con éxito! ID: ${newAccount.id}`);setName('');setInitialBalance('');fetchAccounts();// Refresh the list\n}catch(error){console.error(\"Error creating account:\",error);setMessage(`Error al crear cuenta: ${error.message}`);}};useEffect(()=>{fetchAccounts();},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsxs(\"nav\",{className:\"navbar\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"JFBS - Joseph Fabian Banking System\"}),/*#__PURE__*/_jsxs(\"ul\",{children:[/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"#create\",children:\"Crear Cuenta\"})}),/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"#list\",children:\"Listar Cuentas\"})})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"section\",{id:\"create\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Crear Nueva Cuenta\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:createAccount,children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Nombre:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:name,onChange:e=>setName(e.target.value),required:true})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{children:\"Monto Inicial:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:initialBalance,onChange:e=>setInitialBalance(e.target.value),min:\"0\",step:\"0.01\",required:true})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Crear Cuenta\"})]}),message&&/*#__PURE__*/_jsx(\"p\",{className:\"message\",children:message})]}),/*#__PURE__*/_jsxs(\"section\",{id:\"list\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Cuentas Disponibles\"}),accounts.length===0?/*#__PURE__*/_jsx(\"p\",{children:\"No hay cuentas disponibles.\"}):/*#__PURE__*/_jsxs(\"table\",{children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"ID\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Nombre\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Balance\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:accounts.map(account=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:account.id}),/*#__PURE__*/_jsx(\"td\",{children:account.name}),/*#__PURE__*/_jsxs(\"td\",{children:[\"$\",account.balance.toFixed(2)]})]},account.id))})]})]})]})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","App","accounts","setAccounts","name","setName","initialBalance","setInitialBalance","message","setMessage","API_URL","process","env","REACT_APP_API_URL","fetchAccounts","response","fetch","ok","Error","status","data","json","error","console","createAccount","e","preventDefault","method","headers","body","JSON","stringify","parseFloat","errorData","newAccount","id","className","children","href","onSubmit","type","value","onChange","target","required","min","step","length","map","account","balance","toFixed"],"sources":["/home/jellz/Documents/fallos2.0/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [accounts, setAccounts] = useState([]);\n  const [name, setName] = useState('');\n  const [initialBalance, setInitialBalance] = useState('');\n  const [message, setMessage] = useState('');\n\n  const API_URL = process.env.REACT_APP_API_URL || '/api'; // Usar proxy en desarrollo, o ruta directa en producción\n\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch(`${API_URL}/accounts`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      setAccounts(data);\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      setMessage(`Error al cargar cuentas: ${error.message}`);\n    }\n  };\n\n  const createAccount = async (e) => {\n    e.preventDefault();\n    setMessage('');\n    try {\n      const response = await fetch(`${API_URL}/accounts`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ name, initialBalance: parseFloat(initialBalance) }),\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n      }\n      const newAccount = await response.json();\n      setMessage(`Cuenta '${newAccount.name}' creada con éxito! ID: ${newAccount.id}`);\n      setName('');\n      setInitialBalance('');\n      fetchAccounts(); // Refresh the list\n    } catch (error) {\n      console.error(\"Error creating account:\", error);\n      setMessage(`Error al crear cuenta: ${error.message}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar\">\n        <h1>JFBS - Joseph Fabian Banking System</h1>\n        <ul>\n          <li><a href=\"#create\">Crear Cuenta</a></li>\n          <li><a href=\"#list\">Listar Cuentas</a></li>\n        </ul>\n      </nav>\n\n      <div className=\"container\">\n        <section id=\"create\">\n          <h2>Crear Nueva Cuenta</h2>\n          <form onSubmit={createAccount}>\n            <div>\n              <label>Nombre:</label>\n              <input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                required\n              />\n            </div>\n            <div>\n              <label>Monto Inicial:</label>\n              <input\n                type=\"number\"\n                value={initialBalance}\n                onChange={(e) => setInitialBalance(e.target.value)}\n                min=\"0\"\n                step=\"0.01\"\n                required\n              />\n            </div>\n            <button type=\"submit\">Crear Cuenta</button>\n          </form>\n          {message && <p className=\"message\">{message}</p>}\n        </section>\n\n        <section id=\"list\">\n          <h2>Cuentas Disponibles</h2>\n          {accounts.length === 0 ? (\n            <p>No hay cuentas disponibles.</p>\n          ) : (\n            <table>\n              <thead>\n                <tr>\n                  <th>ID</th>\n                  <th>Nombre</th>\n                  <th>Balance</th>\n                </tr>\n              </thead>\n              <tbody>\n                {accounts.map((account) => (\n                  <tr key={account.id}>\n                    <td>{account.id}</td>\n                    <td>{account.name}</td>\n                    <td>${account.balance.toFixed(2)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}