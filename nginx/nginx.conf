worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Rate limiting: 1 request por segundo por IP, con burst 3 para picos cortos
    limit_req_zone $binary_remote_addr zone=apilimit:10m rate=1r/s;

    # Limitar conexiones simult√°neas por IP a 5 (opcional)
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    upstream backend_app {
        server app1:3000 max_fails=3 fail_timeout=10s;
        server app2:3000 max_fails=3 fail_timeout=10s;
        server app3:3000 max_fails=3 fail_timeout=10s;
    }

    server {
        listen 80;

        # Manejar error 503 para rate limiting
        error_page 503 = @rate_limited;

        location = /rate_limited {
            return 429 "Too Many Requests\n";
        }

        location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
        }

        location /api/ {
            
            limit_req zone=apilimit burst=3 delay=5;

         
            limit_conn addr 5;

            proxy_pass http://backend_app/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        location @rate_limited {
            return 429 "Too Many Requests\n";
        }
    }
}
